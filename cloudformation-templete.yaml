AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFront distribution for React app on S3, S3 bucket, DynamoDB tables, API Gateway, Lambda, Lambda Layer, and IAM Policy integration

Resources:
  # S3 Bucket for web assets
  S3BucketWeb:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 864546685978-web

  # S3 Bucket Policy for CloudFront
  ReactS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: "864546685978-web"
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::864546685978-web/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": {"Fn::Sub": "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"}

  # CloudFront Origin Access Control (Nameを一意に)
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub S3OriginAccessControl-${AWS::StackName}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: "864546685978-web.s3.amazonaws.com"
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2
        IPV6Enabled: true
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: "/index.html"
            ResponseCode: 200
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponsePagePath: "/index.html"
            ResponseCode: 200
            ErrorCachingMinTTL: 300

  # DynamoDB Tables
  Aa1Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: aa1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  Bb1Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: bb1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  Cc1Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cc1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Layer
  LoggerLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: logger
      Description: Logger layer from S3
      Content:
        S3Bucket: 864546685978-ap-northeast-1-dev
        S3Key: lambda_layer/logger_layer.zip
      CompatibleRuntimes:
        - python3.12

  # Lambda Functions
  LoggerTestLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: logger_test
      Handler: lambda_function.lambda_handler
      Role: arn:aws:iam::864546685978:role/lambda-execution-role
      Runtime: python3.12
      Code:
        S3Bucket: 864546685978-ap-northeast-1-dev
        S3Key: lambda/lambda.zip
      Timeout: 30
      Layers:
        - !Ref LoggerLayer
      Environment:
        Variables:
          LOG_LEVEL: INFO

  LoggerTestLambda2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: logger_test2
      Handler: lambda_function2.lambda_handler2
      Role: arn:aws:iam::864546685978:role/lambda-execution-role
      Runtime: python3.12
      Code:
        S3Bucket: 864546685978-ap-northeast-1-dev
        S3Key: lambda/lambda.zip
      Timeout: 30
      Layers:
        - !Ref LoggerLayer
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  # IAM Policy for Lambda
  LoggerTestPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: logger_test_policy
      Roles:
        - lambda-execution-role
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:GetItem
              - dynamodb:Scan
            Resource:
              - arn:aws:dynamodb:ap-northeast-1:864546685978:table/aa1
              - arn:aws:dynamodb:ap-northeast-1:864546685978:table/bb1
              - arn:aws:dynamodb:ap-northeast-1:864546685978:table/cc1

  # API Gateway & Lambda Integration
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SampleApi

  ApiGatewayResourceSample:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: sample

  ApiGatewayResourceSampleId:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayResourceSample
      PathPart: '{id}'

  ApiGatewayResourceSampleIdTest:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref ApiGatewayResourceSampleId
      PathPart: test

  # /sample Methods
  ApiGatewayMethodSampleGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSample
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodSamplePost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSample
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodSamplePut:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSample
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodSampleDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSample
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # /sample/{id} Methods
  ApiGatewayMethodSampleIdGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSampleId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "id": "$input.params('id')",
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodSampleIdPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSampleId
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "id": "$input.params('id')",
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # /sample/{id}/test Methods
  ApiGatewayMethodSampleIdTestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSampleIdTest
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "id": "$input.params('id')",
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayMethodSampleIdTestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ApiGatewayResourceSampleIdTest
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoggerTestLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: |
            {
              "id": "$input.params('id')",
              "body": $input.json('$')
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  LambdaApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LoggerTestLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayMethodSampleGet
      - ApiGatewayMethodSamplePost
      - ApiGatewayMethodSamplePut
      - ApiGatewayMethodSampleDelete
      - ApiGatewayMethodSampleIdGet
      - ApiGatewayMethodSampleIdPost
      - ApiGatewayMethodSampleIdTestGet
      - ApiGatewayMethodSampleIdTestPost
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: v1